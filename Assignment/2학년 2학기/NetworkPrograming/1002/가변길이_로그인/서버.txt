#pragma comment (lib, "ws2_32.lib")
#include <WinSock2.h>
#include <stdio.h>
#include <stdlib.h>
#define SERVERPORT 9000
#define BUFSIZE 4096

#define INTRO_MSG "ID와 PW를 입력하세요!\n"
#define ID_ERROR_MSG "없는 ID입니다.\n"
#define PW_ERROR_MSG "PW가 틀렸습니다.\n"
#define LOGIN_MSG "로그인에 성공했습니다.\n"

enum RESULT { ID_ERROR = 1, PW_ERROR, LOGIN };

struct _LoginInfo
{
	char ID[255];
	char PW[255];
}LoginInfo[3] = { {"aaa","111"},
				  {"bbb","222"},
				  {"kja0204", "1234"} 
};

enum PROTOCOL {
	INTRO = 1, LOGIN_INFO, LOGIN_RESULT
};

int recvn(SOCKET sock, char* buf, int len, int flags)
{
	int received;
	char* ptr = buf;
	int left = len;

	while (left > 0)
	{
		received = recv(sock, ptr, left, flags);
		if (received == SOCKET_ERROR)
		{
			return SOCKET_ERROR;
		}
		else if (received == 0)
		{
			break;
		}

		left -= received;
		ptr += received;
	}

	return (len - left);
}

void err_quit(const char* msg)
{
	LPVOID lpmsgbuf;
	FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER |
		FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPSTR)&lpmsgbuf, 0, NULL);

	MessageBox(NULL, (LPCSTR)lpmsgbuf,
		msg, MB_ICONERROR);
	LocalFree(lpmsgbuf);
	exit(-1);
}

void err_display(const char* msg)
{
	LPVOID lpmsgbuf;
	FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER |
		FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPSTR)&lpmsgbuf, 0, NULL);

	printf("[%s]%s\n", msg, (LPCSTR)lpmsgbuf);
	LocalFree(lpmsgbuf);
}

SOCKET socketinit() {
	SOCKET listen_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (listen_sock == INVALID_SOCKET)
	{
		err_quit("socket()");
	}

	SOCKADDR_IN serveraddr;
	ZeroMemory(&serveraddr, sizeof(serveraddr));
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_port = htons(SERVERPORT);
	serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);

	int retval = bind(listen_sock,
		(SOCKADDR*)&serveraddr, sizeof(serveraddr));
	if (retval == SOCKET_ERROR)
	{
		err_quit("bind()");
	}

	retval = listen(listen_sock, SOMAXCONN);
	if (retval == SOCKET_ERROR)
	{
		err_quit("listen()");
	}

	return listen_sock;
}

void memcpy_func(void* _dst, const void* _src, size_t size) {

}

int main()
{
	int retval;

	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2, 2), &wsa)
		!= 0)
	{
		err_quit("WSAStartUP()");
	}

	SOCKET listen_sock = socketinit();

	SOCKADDR_IN clientaddr;
	int addrlen;
	SOCKET client_sock;
	char buf[BUFSIZE];

	while (1)
	{
		addrlen = sizeof(clientaddr);
		client_sock = accept(listen_sock,
			(SOCKADDR*)&clientaddr, &addrlen);
		if (client_sock == INVALID_SOCKET)
		{
			err_display("accept()");
			continue;//break;
		}

		printf("클라이언트 접속:%s :%d\n",
			inet_ntoa(clientaddr.sin_addr),
			ntohs(clientaddr.sin_port));

		while (1)
		{
			int size = 0;
			char* ptr = buf + sizeof(int);
			int strsize = strlen(INTRO_MSG);

			PROTOCOL protocol = INTRO;

			memcpy(ptr, &protocol, sizeof(PROTOCOL));
			size += sizeof(PROTOCOL);
			ptr += sizeof(PROTOCOL);

			memcpy(ptr, &strsize, sizeof(int));
			size += sizeof(int);
			ptr += sizeof(int);

			memcpy(ptr, INTRO_MSG, strsize);
			size += strsize;
			ptr = buf;

			memcpy(ptr, &size, sizeof(int));

			retval = send(client_sock, buf, size + sizeof(int), 0);
			if (retval == SOCKET_ERROR)
			{
				err_display("send()");
				break;
			}

			retval = recvn(client_sock, (char*)&size, sizeof(int), 0);
			if (retval == SOCKET_ERROR)
			{
				err_display("recv()");
				break;
			}
			else if (retval == 0)
			{
				break;
			}

			retval = recvn(client_sock, buf, size, 0);
			if (retval == SOCKET_ERROR)
			{
				err_display("recv()");
				break;
			}
			else if (retval == 0)
			{
				break;
			}

			_LoginInfo login_info;
			int logsize[2];
			ptr = buf;

			memcpy(&protocol, ptr, sizeof(PROTOCOL));
			ptr += sizeof(PROTOCOL);

			switch (protocol) {
			case LOGIN_INFO:
				memcpy(&logsize[0], ptr, sizeof(int));
				ptr += sizeof(int);

				memcpy(LoginInfo->ID, ptr, logsize[0]);
				ptr += logsize[0];

				memcpy(&logsize[1], ptr, sizeof(int));
				ptr += sizeof(int);

				memcpy(LoginInfo->PW, ptr, logsize[1]);
				break;
			}

			bool flag = false;
			char msg[BUFSIZE];

			protocol = LOGIN_RESULT;
			RESULT result;

			for (int i = 0; i < 3; i++)
			{
				if (!strcmp(LoginInfo[i].ID, login_info.ID))
				{
					flag = true;
					if (!strcmp(LoginInfo[i].PW, login_info.PW))
					{
						result = LOGIN;
						strcpy(msg, LOGIN_MSG);
					}
					else
					{
						result = PW_ERROR;
						strcpy(msg, PW_ERROR_MSG);
					}
				}
			}

			if (!flag)
			{
				result = ID_ERROR;
				strcpy(msg, ID_ERROR_MSG);
			}

			strsize = strlen(msg);
			size = 0;
			ptr = buf + sizeof(int);

			memcpy(ptr, &protocol, sizeof(PROTOCOL));
			size += sizeof(PROTOCOL);
			ptr += sizeof(PROTOCOL);

			memcpy(ptr, &result, sizeof(RESULT));
			size += sizeof(RESULT);
			ptr += sizeof(RESULT);

			memcpy(ptr, &strsize, sizeof(int));
			size += sizeof(int);
			ptr += sizeof(int);

			memcpy(ptr, msg, strsize);
			size += strsize;
			ptr = buf;

			memcpy(ptr, &size, sizeof(int));

			retval = send(client_sock, buf, size + sizeof(int), 0);
			if (retval == SOCKET_ERROR)
			{
				err_display("send()");
				break;
			}

			if (result == LOGIN)
			{
				break;
			}
		}

		closesocket(client_sock);

		printf("클라이언트 종료:%s :%d\n",
			inet_ntoa(clientaddr.sin_addr),
			ntohs(clientaddr.sin_port));
	}

	closesocket(listen_sock);

	WSACleanup();
	return 0;
}