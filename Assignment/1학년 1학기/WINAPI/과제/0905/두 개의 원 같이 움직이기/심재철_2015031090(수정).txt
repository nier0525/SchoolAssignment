#include <windows.h> // 윈도우 헤더파일

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	static RECT rt;
	static int x = 100;
	static int y = 100; // 첫번째 원이 생성되는 좌표
	static int x1 = 180;
	static int y1 = 100; // 두번째 원이 생성되는 좌표

	switch (iMessage) {

	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_LEFT:
			if (x - 44 < rt.left || x1 - 44 < rt.left) // x 좌표가 왼쪽으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				x -= 12; // 키보드를 누를 때마다 첫번째 원이 X 좌표 -12 움직인다 
				x1 -= 12; // 키보드를 누를 때마다 두번째 원이 X 좌표 -12 움직인다 

			break;


		case VK_RIGHT:
			if (x + 44 > rt.right || x1 + 44 > rt.right) // x 좌표가 오른쪽으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				x += 12; // 키보드를 누를 때마다 첫번째 원이 X 좌표 +12 움직인다
				x1 += 12; // 키보드를 누를 때마다 두번째 원이 X 좌표 +12 움직인다
			break;
		case VK_UP:
			if (y - 40 < rt.top || y1 - 40 < rt.top) // y 좌표가 위 방향으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				y -= 12; // 키보드를 누를 때마다 첫번째 원이 Y 좌표 -12 움직인다
				y1 -= 12; // 키보드를 누를 때마다 두번째 원이 Y 좌표 -12 움직인다

			break;

		case VK_DOWN:
			if (y + 44 > rt.bottom || y1 + 44 > rt.bottom) // y 좌표가 아래 방향으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				y += 12; // 키보드를 누를 때마다 첫번째 원이 Y 좌표 +12 움직인다
				y1 += 12; // 키보드를 누를 때마다 두번째 원이 Y 좌표 +12 움직인다

			break;

		}

		InvalidateRect(hWnd, NULL, TRUE); // 화면 초기화

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		GetClientRect(hWnd, &rt); // 창이동 시 창크기 받음
		Ellipse(hdc, x - 40, y - 40, x + 40, y + 40); // 원 1
		Ellipse(hdc, x1 - 40, y1 - 40, x1 + 40, y1 + 40); // 원 2
		EndPaint(hWnd, &ps);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;


	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}