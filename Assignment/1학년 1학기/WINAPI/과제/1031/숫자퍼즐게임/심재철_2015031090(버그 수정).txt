#include <windows.h> // 윈도우 헤더파일
#include <time.h>
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1); // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 800, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를

		if ((Message.message == WM_KEYDOWN || Message.message == WM_KEYUP) && Message.hwnd != hWnd) {
			PostMessage(hWnd, Message.message, Message.wParam, Message.lParam);
		}
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}
#include <math.h>
#define SIZE 100

static int g_Data[9] = { 1,2,3,4,5,6,7,8,9 };
static int g_Ans[9] = { 1,2,3,4,5,6,7,8,9 };
static BOOL Find[9];
static int g_Data2[16] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
static int g_Ans2[16] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
static BOOL Find2[16];

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}

BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < SIZE) return TRUE;
	else return FALSE;
}

void Shuffle(void) {
	int temp, index1 = 0, index2 = 0;
	srand((unsigned int)time(NULL));

	for (int i = 0; i < 9; i++) {
		index1 = rand() % 9;
		index2 = rand() % 9;

		temp = g_Data[index1];
		g_Data[index1] = g_Data[index2];
		g_Data[index2] = temp;
	}
}

void Shuffle2(void) {
	int temp, index1 = 0, index2 = 0;
	srand((unsigned int)time(NULL));

	for (int i = 0; i < 16; i++) {
		index1 = rand() % 16;
		index2 = rand() % 16;

		temp = g_Data2[index1];
		g_Data2[index1] = g_Data2[index2];
		g_Data2[index2] = temp;
	}
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{


	HDC hdc;
	PAINTSTRUCT ps;
	static RECT rt;
	static double delta = 0.0, delta2 = 0.0;
	static BOOL game1 = FALSE;
	static BOOL game2 = FALSE;
	static BOOL seletion1 = FALSE;
	static BOOL seletion2 = FALSE;
	static int mx, my;
	static int x, y;
	static int num = 0, Ans = 0;
	static int num2 = 0, Ans2 = 0;
	static int lose = 0;
	static TCHAR temp[80],temp2[80];

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt); // 이동 시 창크기를 받음
		return 0;

	case WM_CREATE:
		x = 100; y = 150; // 사각형,숫자 고정 좌표 저장
		return 0;

	case WM_TIMER:
		switch (wParam) {
		case 0:
			delta += 0.1f;
			if (delta > 2) // 시간 2초 재현
			{
				for (int i = 0; i < 9; i++)
					Find[i] = FALSE;
				KillTimer(hWnd, 0);
			}
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case 1:
			delta2 += 0.1f;
			if (delta2 > 3) // 시간 3초 재현
			{
				for (int i = 0; i < 16; i++)
					Find2[i] = FALSE;
				KillTimer(hWnd, 1);
			}
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case 2:
			seletion1 = FALSE;
			seletion2 = FALSE;
			KillTimer(hWnd, 2);
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		case 3:
			Find[num] = FALSE;
			Find2[num2] = FALSE;
			KillTimer(hWnd, 3);
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		}

		return 0;

	case WM_LBUTTONDOWN:
		mx = LOWORD(lParam); // 마우스 클릭 지점 x 좌표 저장
		my = HIWORD(lParam); // 마우스 클릭 지점 y 좌표 저장
		hdc = BeginPaint(hWnd, &ps);
		if (game1) {
			if ((mx < x || mx > SIZE * 3 + x) || (my < y || my > SIZE * 3 + y))
				break; // 사각형 좌표 처리
			mx = (mx - x) / SIZE;
			my = ((my - y) / SIZE) * 3;
			num = mx + my; // num 변수에 좌표 저장
			if (Find[num] == FALSE && g_Data[num] == g_Ans[Ans]) {
				Find[num] = TRUE;
				Ans++;
			} // 숫자와 좌표값 비교
			if (Find[num] == TRUE && g_Data[num] != g_Ans[Ans]) {
				Find[num] = TRUE;
			}
			else {
				SetTimer(hWnd, 3, 200, NULL); // 타이머 3번 시작
				Find[num] = TRUE; // 좌표 숫자 표기
				lose += 1; // 변수 값 증가
			}
		};
		if (game2) {
			if ((mx < x || mx > SIZE * 4 + x) || (my < y || my > SIZE * 4 + y))
				break; // 사각형 좌표 처리
			mx = (mx - x) / SIZE;
			my = ((my - y) / SIZE) * 4;
			num2 = mx + my; // num2 변수에 좌표 저장
			if (Find2[num2] == FALSE && g_Data2[num2] == g_Ans2[Ans2]) {
				Find2[num2] = TRUE;
				Ans2++;
			} // 숫자와 좌표값 비교
			if (Find2[num2] == TRUE && g_Data2[num2] != g_Ans2[Ans2]) {
				Find2[num2] = TRUE;
			}
			else {
				SetTimer(hWnd, 3, 200, NULL); // 타이머 3번 시작
				Find2[num2] = TRUE; // 좌표 숫자 표기
				lose += 1; // 변수 값 증가
			}
		};
		InvalidateRect(hWnd, NULL, TRUE);
		EndPaint(hWnd, &ps);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		hdc = BeginPaint(hWnd, &ps);
		wsprintf(temp, " Clear!! Miss -> %d", lose);
		wsprintf(temp2, "3x3,4x4 항목을 누를 시 게임이 초기화되며, 자동으로 숫자가 셔플됩니다.");
		TextOut(hdc, 0, 0, temp2, strlen(temp2));
		if (game1) {
			for (int i = 0; i < 3; i++) {
				{
					for (int j = 0; j < 3; j++)
					{
						Rectangle(hdc, x + i * SIZE, y + j * SIZE, x + (i + 1) * SIZE, (y + 100) + j * SIZE);
					}
				}
			} // 3x3 사각형 생성
			for (int i = 0; i < 9; i++)
				if (TRUE == Find[i])
					if (10 != g_Data[i]) { // 10 이하의 정수
						char tmp[80];
						wsprintf(tmp, "%d", g_Data[i]);
						TextOut(hdc, x + (i % 3)*SIZE + 50, y + (i / 3)*SIZE + 50, tmp, strlen(tmp));
					} // 숫자 표기
			if (seletion1)
			{
				for (int i = 0; i < 9; i++) {
					char tmp[80];
					if (10 != g_Data[i]) {
						wsprintf(tmp, "%d", g_Data[i]);
						TextOut(hdc, x + (i % 3)*SIZE + 50, y + (i / 3)*SIZE + 50, tmp, strlen(tmp));
					}
				} // 힌트값 표기
			}
		}
		if (game2) {
			for (int i = 0; i < 4; i++) {
				{
					for (int j = 0; j < 4; j++)
					{
						Rectangle(hdc, x + i * SIZE, y + j * SIZE, x + (i + 1) * SIZE, (y + 100) + j * SIZE);
					} // 4x4 사각형 생성
				}
			}
			for (int i = 0; i < 16; i++)
				if (TRUE == Find2[i])
					if (17 != g_Data2[i]) { // 17 이하의 정수
						char tmp[80];
						wsprintf(tmp, "%d", g_Data2[i]);
						TextOut(hdc, x + (i % 4)*SIZE + 50, y + (i / 4)*SIZE + 50, tmp, strlen(tmp));
					} // 숫자 표기
			if (seletion2)
			{
				for (int i = 0; i < 16; i++) {
					char tmp[80];
					if (17 != g_Data2[i]) {
						wsprintf(tmp, "%d", g_Data2[i]);
						TextOut(hdc, x + (i % 4)*SIZE + 50, y + (i / 4)*SIZE + 50, tmp, strlen(tmp));
					}
				} // 힌트값 표기
			}
		}

		if (Ans == 9 || Ans2 == 16) { // 승리 조건
			MessageBox(hWnd, temp, "Congratulation!!", MB_OK);
			ExitProcess(0);
		}
		EndPaint(hWnd, &ps);
		return 0;

	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case ID_game1:
			for (int i = 0; i < 9; i++)
				Find[i] = TRUE;
			SetTimer(hWnd, 0, 100, NULL); // 타이머 0번
			game1 = TRUE;
			game2 = FALSE;
			num = 0, Ans = 0;
			delta = 0.0;
			lose = 0;
			Shuffle(); // 숫자 랜덤
			break;
		case ID_game2:
			for (int i = 0; i < 16; i++)
				Find2[i] = TRUE;
			SetTimer(hWnd, 1, 100, NULL); // 타이머 1번
			game2 = TRUE;
			game1 = FALSE;
			num2 = 0, Ans2 = 0;
			delta2 = 0.0;
			lose = 0;
			Shuffle2(); // 숫자 랜덤
			break;

		case ID_hint:
			SetTimer(hWnd, 2, 400, NULL); // 타이머 2번
			if (game1)
				seletion1 = TRUE;
			if (game2)
				seletion2 = TRUE;
			break;

		case ID_end:
			ExitProcess(0);
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;

	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}