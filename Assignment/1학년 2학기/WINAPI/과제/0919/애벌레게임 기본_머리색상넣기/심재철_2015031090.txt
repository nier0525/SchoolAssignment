#include <windows.h> //윈도우 헤더파일
#include <string.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); //CALLBACK 매크로
HINSTANCE g_hinst;	//인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); //제목 표시줄에 표시되는 내용

int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevinstanc, LPSTR ipstrCmdParam, int nCmdShow) //main 함수
{
	HWND hWnd; //윈도우 핸들 선언
	MSG Message; //메세지 구조체 변수 선언
	WNDCLASS WndClass; //Windows Class 구조체 변수 선언
	g_hinst = hinstance; //hinstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; //예약 영역 지금은 사용 X
	WndClass.cbWndExtra = 0; //예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //윈도우의 배경색을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); //윈도우의 커서 (마우스 포인터) 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION); //윈도우의 커서 아이콘 모양을 지정
	WndClass.hInstance = hinstance; //윈도우 클래스를 등록하는 프로그램 번호
	WndClass.lpfnWndProc = WndProc; //윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; //윈도우 클래스의 이름을 지정
	WndClass.lpszMenuName = NULL; //이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; //윈도우의 스타일을 정의

	RegisterClass(&WndClass); //WNDCLASS 구조체의 번지를 전달

	//윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT/*100,100,500,500*/, NULL, (HMENU)NULL, hinstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	//메세지 루프를 실행

	while (GetMessage(&Message, NULL, 0, 0))//Queue에 있는 메세지를 읽어들인다.
	{
		TranslateMessage(&Message); //키보드 입력 메세지를 가공하여 프로그램에서 쉽게 사용할 수 있다.
		DispatchMessage(&Message); //메세지를 윈도우의 메세지 처리함수  WndProc로 전달
	}
	return (int)Message.wParam;//탈출 코드 , 프로그램 종료
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	HPEN hPen, oldPen;
	HBRUSH hBrush, oldBrush;
	static RECT rt; // 좌표를 저장하기 위한 변수
	static int x = 100; // x좌표를 저장하기 위한 정수형 변수
	static int y = 100; // y좌표를 저장하기 위한 정수형 변수
	static int w = 1; // 화살표 키 별로 케이스를 나누기 위한 정수형 변수
	enum key //열거형을 선언
	{
		LEFT = 1, RIGHT, UP, DOWN
	};

	switch (iMessage)
	{
	case WM_KEYDOWN: //키가 눌릴시 발생하는 메시지
		switch (wParam)
		{
		case VK_LEFT:
			w = LEFT; //공의 위치를 바꾸기 위한 변수(왼쪽)
			if (x < (rt.left + 70)) break; //머리가 되는 원이 화면 좌측의 끝에 다달으면 브레이크
			x -= 10;
			break;
		case VK_RIGHT:
			w = RIGHT; //공의 위치를 바꾸기 위한 변수(오른쪽)
			if (x > (rt.right - 70)) break; //머리가 되는 원이 화면 우측의 끝에 다달으면 브레이크
			x += 10;
			break;
		case VK_UP:
			w = UP; //공의 위치를 바꾸기 위한 변수(위쪽)
			if (y < (rt.top + 70)) break; //머리가 되는 원이 화면 위쪽의 끝에 다달으면 브레이크
			y -= 10;
			break;
		case VK_DOWN:
			w = DOWN; //공의 위치를 바꾸기 위한 변수(아래쪽)
			if (y > (rt.bottom - 70)) break; //머리가 되는 원이 화면 아래쪽의 끝에 다달으면 브레이크
			y += 10;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE); //WM_PAINT를 불러오며 화면을 초기화
		return 0;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		GetClientRect(hWnd, &rt); //화면 좌표를 rt변수에 저장

		Ellipse(hdc, x - 20, y - 20, x + 20, y + 20); //기준이 되는 원
		hPen = CreatePen(PS_SOLID, 1, RGB(255, 0, 0)); // 선 색
		oldPen = (HPEN)SelectObject(hdc, hPen);	// 새로운 펜 사용 선언

		hBrush = CreateSolidBrush(RGB(0, 0, 255)); // 면적 색
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
		switch (w)
		{
		case LEFT: //왼쪽에 원을 그림
			Ellipse(hdc, x - 60, y - 20, x - 20, y + 20);
			break;
		case RIGHT: //오른쪽에 원을 그림
			Ellipse(hdc, x + 60, y - 20, x + 20, y + 20);
			break;
		case UP: //위쪽에 원을 그림
			Ellipse(hdc, x - 20, y - 60, x + 20, y - 20);
			break;
		case DOWN: //아래쪽에 원을 그림
			Ellipse(hdc, x - 20, y + 60, x + 20, y + 20);
			break;
		}
		EndPaint(hWnd, &ps);
		return 0;

		SelectObject(hdc, oldPen);	// 이전의 펜으로 돌아감
		DeleteObject(hPen);

		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);

		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
