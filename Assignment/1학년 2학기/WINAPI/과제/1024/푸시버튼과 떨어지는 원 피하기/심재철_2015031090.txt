#include <windows.h> // 윈도우 헤더파일
#include <time.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를

		if ((Message.message == WM_KEYDOWN || Message.message == WM_KEYUP) && Message.hwnd != hWnd) {
			PostMessage(hWnd, Message.message, Message.wParam, Message.lParam);
		}
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}
#include <math.h>
#define SIZE 20

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}
BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < SIZE) return TRUE;
	else return FALSE;
}
LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{

	struct one {
		int x, y, r, g, b;
		BOOL bone;
	}; // 생성할 원의 클라스

	HDC hdc;
	PAINTSTRUCT ps;
	static RECT rt;
	HBRUSH hBrush, oldBrush;

	static int check = 0;
	static one one[20];
	static BOOL OVER = FALSE;
	static int x, y;
	static int plan, i;
	static int s = 10;

	switch (iMessage) {

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;

	case WM_SIZE:
		GetClientRect(hWnd, &rt); // 이동 시 창크기를 받음
		return 0;



	case WM_CREATE:
		GetClientRect(hWnd, &rt);
		x = rt.right / 2; y = 500; // 원형 좌표
		CreateWindow(TEXT("button"), TEXT("시작"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 20, 100, 25, hWnd, (HMENU)0, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("정지"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 50, 100, 25, hWnd, (HMENU)1, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("속도 상승"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 80, 100, 25, hWnd, (HMENU)2, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("속도 감소"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 110, 100, 25, hWnd, (HMENU)3, g_hinst, NULL);
		return 0;

	case WM_KEYDOWN:
		switch (wParam) {
		case VK_LEFT:
			if (x - 20 < rt.left) // x 좌표가 왼쪽으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				x -= 15; // 키보드를 누를 때마다 좌표 -12 움직인다 
			break;


		case VK_RIGHT:
			if (x + 24 > rt.right) // x 좌표가 오른쪽으로 창 이탈 시
			{
				break; // 멈춘다
			}
			else
				x += 15; // 키보드를 누를 때마다 좌표 +12 움직인다
			break;
		}

		InvalidateRect(hWnd, NULL, TRUE);
		return 0;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		hdc = BeginPaint(hWnd, &ps);

		if (plan == 1)
		{
			for (i = 0; i < 20; i++) {
				one[i].y += s;
				Ellipse(hdc, one[i].x - SIZE, one[i].y - SIZE, one[i].x + SIZE, one[i].y + SIZE); // 원형 생성
				if (one[i].y > rt.bottom) {
					one[i].x = rand() % rt.right - SIZE;
					one[i].y = 10; // 창 끝에 닿을 시 y축 10 좌표로 회귀
				}
				if (InCircle(x, y, one[i].x, one[i].y)) {
					KillTimer(hWnd, 1);
					MessageBox(hWnd, "게임종료", "게임종료", MB_OK);
					one[i].y = 10;
				}
			}
		}

		hBrush = CreateSolidBrush(RGB(255, 0, 0));
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush); // 기존색 저장

		Ellipse(hdc, x - SIZE, y - SIZE, x + SIZE, y + SIZE);

		SelectObject(hdc, oldBrush); // 기존 색 선택
		DeleteObject(hBrush); // 색 삭제
		EndPaint(hWnd, &ps);
		return 0;

	case WM_COMMAND:
		switch (wParam)
		{
		case 0:
			SetTimer(hWnd, 1, 50, NULL); // 타이머 시작
			plan = 1; // 시작 버튼
			break;
		case 1:
			KillTimer(hWnd, 1); // 1번 타이머 종료
			break;
		case 2:
			s += 5;
			break;
		case 3:
			s -= 5;
			if (s < 10) s = 10;
			break;
		}
		return 0;

	case WM_TIMER:
			if (!one[check].bone)
			{
				one[check].bone = TRUE; // 원형 생성
				one[check].x = rand() % rt.right - SIZE; // 생성되는 원형들의 x축 랜덤 좌표
				one[check].y = 10; // 생성되는 원형들의 y축 고정 좌표
			}
			if (check == 19) check = 0; // check 가 19개 이상 될 시 0으로 초기화
			check++; // check 정수 상승
			InvalidateRect(hWnd, NULL, TRUE);

		return 0;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}