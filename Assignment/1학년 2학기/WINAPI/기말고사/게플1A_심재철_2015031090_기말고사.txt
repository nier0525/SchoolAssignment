#include <windows.h> // 윈도우 헤더파일
#include <mmsystem.h>
#include <stdio.h>
#include "resource.h"

#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>

#pragma comment (lib,"winmm.lib")

#pragma comment (lib,"msimg32.lib")

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 635, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를

		if ((Message.message == WM_KEYDOWN || Message.message == WM_KEYUP) && Message.hwnd != hWnd) {
			PostMessage(hWnd, Message.message, Message.wParam, Message.lParam);
		}
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}
	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

#define D 0x44
#define F 0x46
#define J 0x4A
#define K 0x4B

#define MAX 12000
#define HIT 430

struct Note {
	int x, y;
	BOOL bone;
};

static int notetype[MAX];

static BOOL KeyDown[4] = { FALSE,FALSE,FALSE,FALSE };
static int Perfect, Good, Bad, Miss;
static BOOL P, G, B, M = FALSE;
static BOOL P2, G2 = FALSE;
static BOOL gaduri = TRUE;


static struct Note note[12000];
static int time = 0;

static TCHAR str[128], str2[128], str3[128];
static TCHAR ch[128], ch1[128], ch2[128], ch3[128], ch4[128];

static int score = 0;
static int temp,temp2,temp3,temp4;

static int combo = 0;
static int maxcombo = 0;

static int life = 200;
static int life_x, i;
static int P_life, G_life;

static int note1, note2, note3, note4;
static int s_x, s_x2 , s_x3 , s_x4;

static int plus = 1;

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
	HDC MemDC;
	HBITMAP OldBitMap;
	int bx, by;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
	bx = bitmap.bmWidth;
	by = bitmap.bmHeight;

	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

void NoteTouch() {
			if (note[i].y == HIT || note[i].y == HIT+1 || note[i].y == HIT+2 || note[i].y == HIT+3 ||
				note[i].y == HIT+4 || note[i].y == HIT + 5 || note[i].y == HIT + 6 ||
				note[i].y == HIT + 7 || note[i].y == HIT + 8 || note[i].y == HIT + 9 ||
				note[i].y == HIT + 10 || note[i].y == HIT + 11 || note[i].y == HIT + 12 ||

				note[i].y == HIT - 8 || note[i].y == HIT - 9 ||
				note[i].y == HIT-1 || note[i].y == HIT-2 || note[i].y == HIT-3 || note[i].y == HIT-4 || 
				note[i].y == HIT - 5 || note[i].y == HIT - 6 || note[i].y == HIT - 7 ||
				note[i].y == HIT - 8 || note[i].y == HIT - 9 || note[i].y == HIT - 10 ||
				note[i].y == HIT - 11 || note[i].y == HIT - 12 || note[i].y == HIT - 13)
			{
				note[i].bone = FALSE;
				note[i].x = 0;
				Perfect += 1 * plus;
				P_life += 1 * plus;
				combo += 1 * plus;
				temp2 += 1 * plus;
				score += 1200 * plus;
				P = TRUE;	G = FALSE;	B = FALSE;	M = FALSE;
				P2 = TRUE;	G2 = FALSE;	
			}

			if (   note[i].y == HIT - 29 || note[i].y == HIT-14 || note[i].y == HIT - 15 
				|| note[i].y == HIT - 16 || note[i].y == HIT - 17 || note[i].y == HIT - 18
				|| note[i].y == HIT - 19 || note[i].y == HIT - 20
				|| note[i].y == HIT - 21 || note[i].y == HIT - 22 || note[i].y == HIT - 23
				|| note[i].y == HIT - 24 || note[i].y == HIT - 25
				|| note[i].y == HIT - 26 || note[i].y == HIT - 27 || note[i].y == HIT - 28
				|| note[i].y == HIT - 27 || note[i].y == HIT - 28 || note[i].y == HIT - 30

				|| note[i].y == HIT + 22 || note[i].y == HIT + 23 || note[i].y == HIT + 24
				|| note[i].y == HIT + 19 || note[i].y == HIT + 20 || note[i].y == HIT + 21
				|| note[i].y == HIT + 16 || note[i].y == HIT + 17 || note[i].y == HIT + 18
				|| note[i].y == HIT + 13 || note[i].y == HIT + 14 || note[i].y == HIT + 15
				|| note[i].y == HIT + 25 || note[i].y == HIT + 26 || note[i].y == HIT + 27)
			{
				note[i].bone = FALSE;
				note[i].x = 0;
				Good += 1 * plus;
				G_life += 1 * plus;
				combo += 1 * plus;
				temp2 += 1 * plus;
				score += 800 * plus;

				P = FALSE;	G = TRUE;	B = FALSE;	M = FALSE;
				P2 = FALSE;	G2 = TRUE;	
			}

			if (note[i].y == HIT-31 || note[i].y == HIT-32 || note[i].y == HIT-33 || note[i].y == HIT - 34 || note[i].y == HIT - 35)
			{
				note[i].bone = FALSE;
				note[i].x = 0;

				Bad += 1 * plus;
				life -= 5 * plus;
				combo = 0;

				temp2 = 0;
				temp = 0;
				temp3 = 0;
				temp4 = 0;

				s_x = 87;
				s_x2 = 62;
				s_x3 = 37;

				score += 200 * plus;

				P = FALSE;	G = FALSE;	B = TRUE;	M = FALSE;
				P2 = FALSE;	G2 = FALSE;
			}

			if (note[i].y == HIT-40 || note[i].y == HIT-41 || note[i].y == HIT-42)
			{

				note[i].bone = FALSE;
				note[i].x = 0;

				Miss += 1 * plus;
				life -= 10 * plus;
				combo = 0;

				temp2 = 0;
				temp = 0;
				temp3 = 0;
				temp4 = 0;

				P = FALSE;	G = FALSE;	B = FALSE;	M = TRUE;
				P2 = FALSE;	G2 = FALSE;
			}
}


LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc, backDC, memDC;
	static HBITMAP notes, notes2, gear, lights, lights2, per, goo, ba, mi;
	static HBITMAP s0, s1, s2, s3, s4, s5, s6, s7, s8, s9 , ef;
	static HBITMAP back, ui, maxco;
	static HBITMAP DB, oldDB;
	static HBRUSH lifebar, oldlifebar;
	PAINTSTRUCT ps;
	static RECT rt, buf;

	static int speed = 6;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		if (gaduri) {
			notes = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP3));
			notes2 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP4));
			gear = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP5));
			per = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP8));
			goo = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP9));
			ba = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP10));
			mi = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP11));
			s0 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP12));
			s1 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP13));
			s2 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP14));
			s3 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP15));
			s4 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP16));
			s5 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP17));
			s6 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP18));
			s7 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP19));
			s8 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP20));
			s9 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP21));
			ef = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP22));
			back = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP24));
			ui = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP25));
			maxco = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP26));
		}
	
		maxcombo = 0;

		s_x = 87;
		s_x2 = 62;
		s_x3 = 37;

		break;
	
	case WM_KEYDOWN:
		SetTimer(hWnd, 5, 20, NULL);
		switch (wParam) {
		case D:
			lights = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP7));
			KeyDown[1] = TRUE;
			note1 = 1;
			break;

		case F:
			lights2 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP6));
			KeyDown[2] = TRUE;
			note2 = 1;
			break;
		case J:
			lights2 = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP6));
			KeyDown[3] = TRUE;
			note3 = 1;
			break;
		case K:
			lights = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP7));
			KeyDown[4] = TRUE;
			note4 = 1;
			break;


		case VK_RETURN:

			life = 200;

			temp = 0;	temp2 = 0;	temp3 = 0;	temp4 = 0;
			
			combo = 0;	maxcombo = 0;	plus = 1;

			s_x = 87;	s_x2 = 62;	s_x3 = 37;	s_x4 = 12;

			time = 0;

			score = 0;

			P2 = FALSE;	G2 = FALSE;	 B = FALSE; M = FALSE;

			Perfect = 0;	Good = 0;	Bad = 0;	Miss = 0;

			P_life = 0;		G_life = 0;

			FILE* fp;
			fp = fopen("2.txt", "r");
			if (fp == NULL) {
				MessageBox(hWnd, TEXT("노트 불러오기 실패"), TEXT("Error"), MB_OK);
				ExitProcess(0);
			}
			for (int j = 0; j < MAX; j++) {
				fscanf(fp, "%d", &notetype[j]);
			}
			fclose(fp);
			
			SetTimer(hWnd, 1, 20, NULL);
			SetTimer(hWnd, 2, 10, NULL);
			SetTimer(hWnd, 3, 1000, NULL);
			note[time].bone = FALSE;
			break;

		case VK_ESCAPE:
			KillTimer(hWnd, 1);
			KillTimer(hWnd, 2);
			KillTimer(hWnd, 5);
			ExitProcess(0);
			break;
		}
		break;


	case WM_KEYUP:
		switch (wParam) {
		case D:
			DeleteObject(lights);
			note1 = 0;
			plus = 1;
			KeyDown[1] = FALSE;
			break;
		case F:
			DeleteObject(lights2);
			note2 = 0;
			plus = 1;
			KeyDown[2] = FALSE;
			break;
		case J:
			DeleteObject(lights2);
			note3 = 0;
			plus = 1;
			KeyDown[3] = FALSE;
			break;
		case K:
			DeleteObject(lights);
			note4 = 0;
			plus = 1;
			KeyDown[4] = FALSE;
			break;
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;

	case WM_TIMER:
		switch (wParam) {
		case 1:
			time += 1;
			if (time >= 12000) {
				KillTimer(hWnd, 1);
			}

			// 최대 콤보
			if (combo >= maxcombo) {
				maxcombo = combo;
			}
			// 곡을 완주 했을 경우 클리어
			if (notetype[time] == 16) {
				KillTimer(hWnd, 1);
				KillTimer(hWnd, 2);
				time = 0;
				PlaySound(TEXT("성공11.wav"), NULL, SND_FILENAME | SND_ASYNC);
				MessageBox(hWnd, "클리어!", "Clear", MB_OK);
			}
			// 체력 회복 조건
			if (P_life >= 5 || G_life >= 7) {
				life += 10;
				P_life = 0;	G_life = 0;
			}
			// 체력이 풀피보다 오버하는 경우
			if (life >= 200) life = 200;
			// 체력이 완전이 없어졌을 경우 게임 오버
			
			if (life <= 0) {
				life = 0;
				KillTimer(hWnd, 1);
				KillTimer(hWnd, 2);
				time = 0;
				PlaySound(TEXT("실패.wav"), NULL, SND_FILENAME | SND_ASYNC);
				MessageBox(hWnd, "게임 오버!", "Game Over", MB_OK);
			}
			
			break;
		case 2:
			// 노트 생성
			if (!note[time].bone) {
				note[time].bone = TRUE;
				note[time].y = 0;
				note[time].x = 12;
			}
			break;

		case 3:
			PlaySound(TEXT("bgm.wav"), NULL, SND_FILENAME | SND_ASYNC);
			KillTimer(hWnd,3);
			break;

		case 5:
			KeyDown[1] = FALSE;
			KeyDown[2] = FALSE;
			KeyDown[3] = FALSE;
			KeyDown[4] = FALSE;
			KillTimer(hWnd, 5);
			break;
		}
		InvalidateRect(hWnd, NULL, FALSE);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼링
		memDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(memDC, DB);
		PatBlt(memDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = memDC;
		memDC = backDC;
		// -----------------------------------

		// 배경
		DrawBitmap(hdc, 0, 0, rt.right, rt.bottom, back, 255, 0, 0);
		// -----------------------------------

		// 기어
		DrawBitmap(hdc, 0, 0, 225, 600, gear, 255, 255, 0);
		// -----------------------------------

		// 라이트
		if (note1 == 1) {
			DrawBitmap(hdc, 12, 187, 48, 250, lights, 255, 255, 255);
		}
		if (note2 == 1) {
			DrawBitmap(hdc, 63, 187, 48, 250, lights2, 255, 255, 255);
		}
		if (note3 == 1) {
			DrawBitmap(hdc, 114, 187, 48, 250, lights2, 255, 255, 255);
		}
		if (note4 == 1) {
			DrawBitmap(hdc, 165, 187, 48, 250, lights, 255, 255, 255);
		}
		// -----------------------------------------------
		
		// 노트 
		for (i = 0; i < time; i++) {
			if (note[i].bone) {
				note[i].y += speed;
				if (notetype[i] == 0) {
					note[i].bone = FALSE;
				}
				// 단타
				if (notetype[i] == 1) {
						note[i].x = 12;
						DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
						if (KeyDown[1]) {
							NoteTouch();
							if (P || G) {
								DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							}
							KeyDown[1] = FALSE;
						}
					}
				if (notetype[i] == 2) {
						note[i].x = 62;
						DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes2, 0, 0, 0);
						if (KeyDown[2]) {
							NoteTouch();
							if (P || G) {
								DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							}
							KeyDown[2] = FALSE;
						}
					}
				if (notetype[i] == 3) {
						note[i].x = 112;
						DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes2, 0, 0, 0);
						if (KeyDown[3]) {
							NoteTouch();
							if (P || G) {
								DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
							}
							KeyDown[3] = FALSE;
						}
					}
				if (notetype[i] == 4) {
						note[i].x = 162;
						DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
						if (KeyDown[4]) {
							NoteTouch();
							if (P || G) {
								DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
							}
							KeyDown[4] = FALSE;
						}
					}
				// 2타
				if (notetype[i] == 5)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					if (KeyDown[1] && KeyDown[2]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[2] = FALSE;
					}
				}
				if (notetype[i] == 6)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes2, 0, 0, 0);
					if (KeyDown[1] && KeyDown[3]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[3] = FALSE;
					}
				}
				if (notetype[i] == 7)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 150, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[1] && KeyDown[4]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				if (notetype[i] == 8)
				{
					note[i].x = 62;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					if (KeyDown[2] && KeyDown[3]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc,	62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[2] = FALSE;
						KeyDown[3] = FALSE;
					}
				}
				if (notetype[i] == 9)
				{
					note[i].x = 62;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[2] && KeyDown[4]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc,	162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[2] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				if (notetype[i] == 10)
				{
					note[i].x = 112;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[3] && KeyDown[4]) {
						plus = 2;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[3] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				// 3타
				if (notetype[i] == 11)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes2, 0, 0, 0);
					if (KeyDown[1] && KeyDown[2] && KeyDown[3]) {
						plus = 3;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[2] = FALSE;
						KeyDown[3] = FALSE;
					}
				}
				if (notetype[i] == 12)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 150, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[1] && KeyDown[2] && KeyDown[4]) {
						plus = 3;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[2] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				if (notetype[i] == 13)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 150, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[1] && KeyDown[3] && KeyDown[4]) {
						plus = 3;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[3] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				if (notetype[i] == 14)
				{
					note[i].x = 62;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[2] && KeyDown[3] && KeyDown[4]) {
						plus = 3;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[2] = FALSE;
						KeyDown[3] = FALSE;
						KeyDown[4] = FALSE;
					}
				}
				// 4타
				if (notetype[i] == 15)
				{
					note[i].x = 12;
					DrawBitmap(hdc, note[i].x, note[i].y, 50, 10, notes, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 50, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 100, note[i].y, 50, 10, notes2, 0, 0, 0);
					DrawBitmap(hdc, note[i].x + 150, note[i].y, 50, 10, notes, 0, 0, 0);
					if (KeyDown[1] && KeyDown[2] && KeyDown[3] && KeyDown[4]) {
						plus = 4;
						NoteTouch();
						if (P || G) {
							DrawBitmap(hdc, 12, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 62, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 112, note[i].y, 50, 20, ef, 0, 0, 0);
							DrawBitmap(hdc, 162, note[i].y, 50, 20, ef, 0, 0, 0);
						}
						KeyDown[1] = FALSE;
						KeyDown[2] = FALSE;
						KeyDown[3] = FALSE;
						KeyDown[4] = FALSE;
					}
				}

				// auto
				/*
				if (note[i].y == 430 || note[i].y == 431 || note[i].y == 432)
					NoteTouch();
				*/
				//

				if (note[i].y >= 480) {
						note[i].bone = FALSE;
						Miss += 1 * plus;
						life -= 10 * plus;
						combo = 0;
						temp2 = 0;	temp = 0;	temp3 = 0;	temp4 = 0;
						s_x = 87;
						s_x2 = 62;
						s_x3 = 37;
						if (notetype[i] >= 5) plus = 2;
						if (notetype[i] >= 11) plus = 3;
						if (notetype[i] == 15) plus = 4;
						
						P2 = FALSE;	G2 = FALSE;	B = FALSE;	M = TRUE;
				}	
			}
		}
		// -----------------------------------------------
		// 판정
		if (P2) {
			DrawBitmap(hdc, 40, 100, 150, 42, per, 0, 0, 0);
		}
		if (G2) {
			DrawBitmap(hdc, 40, 100, 150, 38, goo, 0, 0, 0);
		}
		if (B) {
			DrawBitmap(hdc, 40, 100, 150, 38, ba,  0, 0, 0);
		}
		if (M) {
			DrawBitmap(hdc, 40, 100, 150, 38, mi,  0, 0, 0);
		}
		// ----------------------------------------------
		// 라이프
		lifebar = CreateSolidBrush(RGB(85, 255, 102));
		oldlifebar = (HBRUSH)SelectObject(hdc, lifebar);

		Rectangle(hdc, 11, 585, 11 + life, 579);
		SelectObject(hdc, oldlifebar);
		DeleteObject(lifebar);
		// -----------------------------------------------

		// 콤보 구현
		// 1 의 자리
		switch (temp2) {
		case 0:
			if (temp >= 1 || temp3 >= 1 || temp4 >= 1) {
				DrawBitmap(hdc, s_x, 150, 50, 70, s0, 0, 0, 0);
			}
			break;
		case 1:
			DrawBitmap(hdc, s_x, 150, 50, 70, s1, 0, 0, 0);
			break;
		case 2:
			DrawBitmap(hdc, s_x, 150, 50, 70, s2, 0, 0, 0);
			break;
		case 3:
			DrawBitmap(hdc, s_x, 150, 50, 70, s3, 0, 0, 0);
			break;
		case 4:
			DrawBitmap(hdc, s_x, 150, 50, 70, s4, 0, 0, 0);
			break;
		case 5:	
			DrawBitmap(hdc, s_x, 150, 50, 70, s5, 0, 0, 0);
			break;
		case 6:
			DrawBitmap(hdc, s_x, 150, 50, 70, s6, 0, 0, 0);
			break;
		case 7:
			DrawBitmap(hdc, s_x, 150, 50, 70, s7, 0, 0, 0);
			break;
		case 8:
			DrawBitmap(hdc, s_x, 150, 50, 70, s8, 0, 0, 0);
			break;
		case 9:
			DrawBitmap(hdc, s_x, 150, 50, 70, s9, 0, 0, 0);
			break;
		case 10:
			temp += 1;
			temp2 = 0;
			break;
		case 11:
			temp += 1;
			temp2 = 1;
			break;
		case 12:
			temp += 1;
			temp2 = 2;
			break;
		case 13:
			temp += 1;
			temp2 = 3;
			break;

		}
		// 10의 자리
		switch (temp) {

		case 0:
			if (temp3 >= 1 || temp4 >= 1) {
				DrawBitmap(hdc, s_x2, 150, 50, 70, s0, 0, 0, 0);
			}
			break;
		case 1:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s1, 0, 0, 0);
			break;
		case 2:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s2, 0, 0, 0);
			break;
		case 3:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s3, 0, 0, 0);
			break;
		case 4:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s4, 0, 0, 0);
			break;
		case 5:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s5, 0, 0, 0);
			break;
		case 6:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s6, 0, 0, 0);
			break;
		case 7:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s7, 0, 0, 0);
			break;
		case 8:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s8, 0, 0, 0);
			break;
		case 9:
			s_x = 112;
			DrawBitmap(hdc, s_x2, 150, 50, 70, s9, 0, 0, 0);
			break;
		case 10:
			temp = 0;
			temp2 = 0;
			temp3 += 1;
			break;
		}
		// 100의 자리
		switch(temp3) {
		case 0:
			if (temp4 >= 1) {
				DrawBitmap(hdc, s_x3, 150, 50, 70, s0, 0, 0, 0);
			}
			break;
		case 1:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s1, 0, 0, 0);
			break;
		case 2:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s2, 0, 0, 0);
			break;
		case 3:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s3, 0, 0, 0);
			break;
		case 4:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s4, 0, 0, 0);
			break;
		case 5:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s5, 0, 0, 0);
			break;
		case 6:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s6, 0, 0, 0);
			break;
		case 7:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s7, 0, 0, 0);
			break;
		case 8:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s8, 0, 0, 0);
			break;
		case 9:
			s_x = 137;
			s_x2 = 87;
			DrawBitmap(hdc, s_x3, 150, 50, 70, s9, 0, 0, 0);
			break;
		case 10:
			temp = 0;
			temp2 = 0;
			temp3 = 0;
			temp4 += 1;
			break;
		}
		// 1000의 자리
		switch (temp4) {
		case 1:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s1, 0, 0, 0);
			break;
		case 2:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s2, 0, 0, 0);
			break;
		case 3:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s3, 0, 0, 0);
			break;
		case 4:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s4, 0, 0, 0);
			break;
		case 5:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s5, 0, 0, 0);
			break;
		case 6:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s6, 0, 0, 0);
			break;
		case 7:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s7, 0, 0, 0);
			break;
		case 8:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s8, 0, 0, 0);
			break;
		case 9:
			s_x = 162;
			s_x2 = 112;
			s_x3 = 62;
			DrawBitmap(hdc, s_x4, 150, 50, 70, s9, 0, 0, 0);
			break;
		}
		// -----------------------------------------------
		
		// 점수
		SetBkMode(hdc, TRANSPARENT); // 텍스트 배경 투명 함수
		wsprintf(str2, "%d", score);
		TextOut(hdc, 147, 545, str2, strlen(str2));
		// -----------------------------------------------
		// UI

		wsprintf(ch, "%d", Perfect);
		wsprintf(ch1, "%d", Good);
		wsprintf(ch2, "%d", Bad);
		wsprintf(ch3, "%d", Miss);
		wsprintf(ch4, "%d", maxcombo);

		DrawBitmap(hdc, 700, 20, 75, 22, per, 0, 0, 0);
		DrawBitmap(hdc, 670, 44, 120, 40, ui, 0, 0, 0);
		DrawBitmap(hdc, 700, 80, 75, 22, goo, 0, 0, 0);
		DrawBitmap(hdc, 670, 104, 120, 40, ui, 0, 0, 0);
		DrawBitmap(hdc, 700, 140, 75, 22, ba, 0, 0, 0);
		DrawBitmap(hdc, 670, 164, 120, 40, ui, 0, 0, 0);
		DrawBitmap(hdc, 700, 200, 75, 22, mi, 0, 0, 0);
		DrawBitmap(hdc, 670, 224, 120, 40, ui, 0, 0, 0);
		DrawBitmap(hdc, 700, 260, 75, 30, maxco, 0, 0, 0);
		DrawBitmap(hdc, 670, 284, 120, 40, ui, 0, 0, 0);

		TextOut(hdc, 720, 60, ch, strlen(ch));
		TextOut(hdc, 720, 120, ch1, strlen(ch1));
		TextOut(hdc, 720, 180, ch2, strlen(ch2));
		TextOut(hdc, 720, 240, ch3, strlen(ch3));
		TextOut(hdc, 720, 300, ch4, strlen(ch4));

		// ------------------------------------
		//------------------- 더블 버퍼링 끝
		backDC = hdc;
		hdc = memDC;
		memDC = backDC;
		//GetClientRect(hWnd, &buf);
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, memDC, 0, 0, SRCCOPY);
		SelectObject(memDC, oldDB);
		DeleteObject(DB);
		DeleteObject(memDC);
		//--------------------------------

		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		DeleteObject(notes);
		DeleteObject(notes2);
		
		DeleteObject(gear);
		
		DeleteObject(per);
		DeleteObject(goo);
		DeleteObject(ba);
		DeleteObject(mi);
		
		DeleteObject(s0);
		DeleteObject(s1);
		DeleteObject(s2);
		DeleteObject(s3);
		DeleteObject(s4);
		DeleteObject(s5);
		DeleteObject(s6);
		DeleteObject(s7);
		DeleteObject(s8);
		DeleteObject(s9);
		
		DeleteObject(ef);
		DeleteObject(back);
		DeleteObject(ui);

		PostQuitMessage(0);
		return 0;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
	system("pause");
}