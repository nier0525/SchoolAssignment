#include <windows.h> // 윈도우 헤더파일
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
	HDC MemDC;
	HBITMAP OldBitMap;
	int bx, by;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
	bx = bitmap.bmWidth;
	by = bitmap.bmHeight;

	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));
	//BitBlt(hdc, x, y, bx, by, MemDC, 0, 0, SRCCOPY);

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

#include <math.h>
#define BSIZE2 125

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}

BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < BSIZE2) return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	RECT rt, buf;
	HBITMAP DB, oldDB;
	static HBITMAP player, hammer;
	static int x, y, mx, my;
	static int num;

	static int score = 0;
	static int timer = 30;
	static bool image = true;

	static char str[128] , str2[128];

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		player = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP1));
		hammer = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP2));
		x = 0;
		y = 0;
		SetTimer(hWnd, 1, 300, nullptr);
		SetTimer(hWnd, 2, 1000, nullptr);
		break;

	case WM_TIMER:
		switch (wParam) {
		case 1:
			GetClientRect(hWnd, &rt);
			num++;
			x = rand() % rt.right - BSIZE2;
			y = rand() % rt.bottom - BSIZE2;
			if (num % 2 == 0) {
				image = true;
			}
			else {
				image = false;
			}
			InvalidateRect(hWnd, nullptr, false);
			break;

		case 2:
			timer -= 1;
			if (timer <= 0) {
				KillTimer(hWnd, 1);
				KillTimer(hWnd, 2);

				char str3[128];
				wsprintf(str3, "당신의 최종 점수는 %d 입니다.", score);
				MessageBox(hWnd, str3, "GameOver", MB_OK);
				ExitProcess(0);
			}
			break;
		}
		break;

	case WM_LBUTTONDOWN:
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		if(InCircle(x, y, mx, my)) {
			score++;
			InvalidateRect(hWnd, nullptr, true);
		}
		break;

	case WM_MOUSEMOVE:
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		InvalidateRect(hWnd, nullptr, false);

		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ----------
		if (image)
			DrawBitmap(hdc, x, y, BSIZE2, BSIZE2, player, 255, 255, 255);

		DrawBitmap(hdc, mx, my, 70, 70, hammer, 255, 255, 255);

		wsprintf(str, "현재 당신의 점수 : %d", score);
		wsprintf(str2, "남은 시간 : %d", timer);
		TextOut(hdc, 0, 50, str, strlen(str));
		TextOut(hdc, rt.right / 2, 0, str2, strlen(str2));

		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		DeleteObject(player);
		DeleteObject(hammer);
		PostQuitMessage(0);
		return 0;


	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}