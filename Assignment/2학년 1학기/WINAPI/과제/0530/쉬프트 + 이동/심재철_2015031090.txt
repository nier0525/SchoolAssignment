#include <windows.h> // 윈도우 헤더파일
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

#include <math.h>
#define BSIZE 100

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
	HDC MemDC;
	HBITMAP OldBitMap;
	int bx, by;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
	bx = bitmap.bmWidth;
	by = bitmap.bmHeight;

	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int bx, int by) {
	HDC MemDC;
	HBITMAP OldBitMap;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);

	BitBlt(hdc, x, y, brx, bry, MemDC, bx, by, SRCCOPY);

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}
BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < BSIZE) return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	RECT rt, buf;
	HBITMAP DB, oldDB;
	static HBITMAP bit;

	static int x, y, mx, my, tx, ty;
	static bool move = false;
	static bool isShift = false;
	static bool Shiftx, Shifty;
	static bool State = true;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		bit = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP1));
		break;

	case WM_LBUTTONDOWN:
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		if (InCircle(x, y, mx, my)) {
			move = true;
		}
		break;

	case WM_MOUSEMOVE:
		mx = LOWORD(lParam);
		my = HIWORD(lParam);
		if (move) {
			if (!isShift) {
				x = mx - 50;
				y = my - 50;
			}
			else {

				if (Shiftx) {
					x = mx - 50;
				}
				if (Shifty) {
					y = my - 50;
				}

			}
		}
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_LBUTTONUP:
		move = false;
		break;

	case WM_KEYDOWN:
		switch (wParam) {
		case VK_SHIFT:
			if (State) {
				if (x - mx - 50 > y - my - 50 || x + mx - 50 > y + my - 50) {
					Shiftx = true;
					Shifty = false;
					State = false;
				}
				if (x - mx - 50 < y - my - 50 || x + mx - 50 < y + my - 50) {
					Shiftx = false;
					Shifty = true;
					State = false;
				}
			}
			isShift = true;
			break;
		}
		break;

	case WM_KEYUP:
		switch (wParam) {
		case VK_SHIFT:
			State = true;
			isShift = false;
			break;
		}
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ----------

		DrawBitmap(hdc, x, y, BSIZE, BSIZE, bit, 0, 0, 0);

		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		DeleteObject(bit);
		PostQuitMessage(0);
		return 0;


	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}