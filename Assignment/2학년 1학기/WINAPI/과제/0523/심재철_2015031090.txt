#include <windows.h> // 윈도우 헤더파일
#include <time.h>
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1); // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 900, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

int x, y, mx, my;
int index = 3;
int temp, rax, ray, count, score;
int g_map[10][10];
char str[128];

bool EndGame = false;

#define BSIZE 100
#define NODATA (index * index - 1)

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
	HDC MemDC;
	HBITMAP OldBitMap;
	int bx, by;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
	bx = bitmap.bmWidth;
	by = bitmap.bmHeight;

	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int bx, int by) {
	HDC MemDC;
	HBITMAP OldBitMap;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);

	BitBlt(hdc, x, y, brx, bry, MemDC, bx, by, SRCCOPY);

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

void InitAray(int index) {
	count = 0;
	EndGame = true;
	srand(time(nullptr));
	
	for (int i = 0; i < index; i++) {
		for (int j = 0; j < index; j++) {
			g_map[i][j] = count++;			
		}
	}

	for (int i = 0; i < index; i++) {
		for (int j = 0; j < index; j++) {
			rax = rand() % index;
			ray = rand() % index;

			temp = g_map[i][j];
			g_map[i][j] = g_map[rax][ray];
			g_map[rax][ray] = temp;
		}
	}
}

void Swap(int* a, int* b) {
	int temp = *a;
	*a = *b;
	*b = temp;
}

void MovePuz(int mx, int my) {
	if (mx < index && my < index) {
		if (0 <= mx - 1 && NODATA == g_map[my][mx - 1]) {
			Swap(&g_map[my][mx], &g_map[my][mx - 1]);
		}
		if (mx < index && NODATA == g_map[my][mx + 1]) {
			Swap(&g_map[my][mx], &g_map[my][mx + 1]);
		}
		if (0 <= my - 1 && NODATA == g_map[my - 1][mx]) {
			Swap(&g_map[my][mx], &g_map[my - 1][mx]);
		}
		if (my < index && NODATA == g_map[my + 1][mx]) {
			Swap(&g_map[my][mx], &g_map[my + 1][mx]);
		}
	}
}

bool Clear() {
	score = 0;
	for (int i = 0; i < index; i++) {
		for (int j = 0; j < index; j++) {
			if (g_map[i][j] != score++) {
				wsprintf(str, "%d", score);
				return false;
			}
		}
	}
	return true;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	RECT rt, buf;
	HBITMAP DB, oldDB;
	static HBITMAP Player;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		Player = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP5));
		SetTimer(hWnd, 1, 100, nullptr);
		break;

	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case ID_MENU_3X3:
			index = 3;
			x = 700 / index;
			y = 510 / index;
			break;

		case ID_MENU_4X4:
			index = 4;
			x = 700 / index;
			y = 510 / index;
			break;

		case ID_MENU_5X5:
			index = 5;
			x = 700 / index;
			y = 510 / index;
			break;
		}
		InitAray(index);
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_TIMER:
		break;

	case WM_LBUTTONDOWN:
		mx = LOWORD(lParam) / (700 / index);
		my = HIWORD(lParam) / (510 / index);
		if (EndGame) {
			MovePuz(mx, my);
			if (Clear()) {
				MessageBox(hWnd, "Clear!!", "GameOver", MB_OK);
				EndGame = false;
			}
		}
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ----------

		Rectangle(hdc, 700, 0, 900, 150);
		DrawBitmap(hdc, 700, 160, 200, 150, Player, 0, 0, 0);

		for (int i = 0; i < index; i++) {
			for (int j = 0; j < index; j++) {
				if (g_map[i][j] == NODATA) {
					PatBlt(hdc, x * j, y * i, x - 1, y - 1, WHITENESS);
				}

				else {
					POINTS pt = { g_map[i][j] % index , g_map[i][j] / index };
					DrawBitmap(hdc, x * j, y * i, x - 1, y - 1, Player, pt.x * x, pt.y * y);
					wsprintf(str, "%d", g_map[i][j]);
					TextOut(hdc, 705 + 40 * j, 5 + 30 * i, str, strlen(str));
				}
			}
		}

		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		KillTimer(hWnd, 1);
		DeleteObject(Player);
		PostQuitMessage(0);
		return 0;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}