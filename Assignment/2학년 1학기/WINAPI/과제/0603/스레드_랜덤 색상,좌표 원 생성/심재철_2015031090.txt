#include <windows.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
HINSTANCE g_hInst;
HWND hWndMain;
LPCTSTR lpszClass = TEXT("MultiThread");

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance
	, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);

	while (GetMessage(&Message, NULL, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return (int)Message.wParam;
}

HANDLE hEvent;
#define SIZE 20

DWORD WINAPI ThreadFunc(LPVOID prc)
{
	HDC hdc;
	HBRUSH hBrush, hOldBrush;
	static int r, g, b;
	POINT pos = *(LPPOINT)prc;

	hdc = GetDC(hWndMain);
	for (;;) {
		r = rand() % 255;
		g = rand() % 255;
		b = rand() % 255;
		hBrush = CreateSolidBrush(RGB(r, g, b));
		hOldBrush = (HBRUSH)SelectObject(hdc, hBrush);
		Ellipse(hdc, pos.x - SIZE, pos.y - SIZE, pos.x + SIZE, pos.y + SIZE);
		SelectObject(hdc, hOldBrush);
		DeleteObject(hBrush);
		Sleep(500);
	}
	ReleaseDC(hWndMain, hdc);
	return 0;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	DWORD ThreadID;
	RECT rt;
	static POINT pos;
	static int index = 0;

	switch (iMessage) {
	case WM_CREATE:
		hWndMain = hWnd;
		hEvent = CreateEvent(nullptr, false, false, nullptr);
		return TRUE;

	case WM_LBUTTONDOWN:
		if (index < 30) {
			GetClientRect(hWnd, &rt);
			pos.x = rand() % rt.right - SIZE;
			pos.y = rand() % rt.bottom - SIZE;

			ResetEvent(hEvent);
			CloseHandle(CreateThread(NULL, 0, ThreadFunc, &pos, 0, &ThreadID));
			index++;
		}
		return 0;

	case WM_DESTROY:
		CloseHandle(hEvent);
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
