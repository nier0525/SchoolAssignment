#include <windows.h> // 윈도우 헤더파일
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		500, 300, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
	HDC MemDC;
	HBITMAP OldBitMap;
	int bx, by;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
	bx = bitmap.bmWidth;
	by = bitmap.bmHeight;

	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int bx, int by) {
	HDC MemDC;
	HBITMAP OldBitMap;
	BITMAP bitmap;

	MemDC = CreateCompatibleDC(hdc);
	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);

	GetObject(hBitmap, sizeof(BITMAP), &bitmap);

	BitBlt(hdc, x, y, brx, bry, MemDC, bx, by, SRCCOPY);

	SelectObject(MemDC, OldBitMap);
	DeleteDC(MemDC);
}

#include <time.h>

enum {
	Start, LevelUp, Lose
};

#define WordCount 15

HWND hWndMain;
RECT MainRt;

int Life, Level , Wait , Speed;
int RandomY, count, score, len , Best;

bool start, GameOver, Enter, Next;

TCHAR* RandText[] = { (TCHAR*)TEXT("Right"), (TCHAR*)TEXT("Left"),(TCHAR*)TEXT("Down"),(TCHAR*)TEXT("Up"),
(TCHAR*)TEXT("Korea"),(TCHAR*)TEXT("Japen"),(TCHAR*)TEXT("Pen"),(TCHAR*)TEXT("Enter"),(TCHAR*)TEXT("Space"),(TCHAR*)TEXT("Hello"),
(TCHAR*)TEXT("Good"),(TCHAR*)TEXT("Bad"),(TCHAR*)TEXT("Wait"),(TCHAR*)TEXT("Middle"), (TCHAR*)TEXT("High") };

TCHAR* str[] = { (TCHAR*)TEXT("Enter 를 누르면 게임이 시작됩니다 !!"), (TCHAR*)TEXT("Enter 를 누르면 다음 레벨이 시작됩니다 !!"),
(TCHAR*)TEXT("Game Over.. Enter 를 누르면 다시 게임이 시작됩니다.")};

TCHAR lifeWord[128];
TCHAR LevelWord[128];
TCHAR BestLevel[128];

TCHAR SetText[128];
TCHAR temp[128];

struct RainText {
	TCHAR* Data;
	POINT pos;
} GameData[100];

void InitText(int i) {
	GetClientRect(hWndMain, &MainRt);
	GameData[i].Data = RandText[rand() % WordCount];
	GameData[i].pos.x = 20 + (rand() % MainRt.right - 60);
	GameData[i].pos.y = 10;
}

void LevelUpEvent() {
	score = 0;
	count = 0;
	Level++;
	Speed++;
}

void InitGame() {
	Level = 1;
	Life = 5;
	Speed = 1;
	score = 0;
	count = 0;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	RECT rt, buf;
	HBITMAP DB, oldDB;

	static HBITMAP BackGround;
	static HBRUSH hBrush, oldBrush;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		hWndMain = hWnd;
		srand(time(nullptr));
		BackGround = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_BITMAP1));
		start = false;
		GameOver = false;
		Enter = false;

		Level = 1;
		Life = 5;
		score = 0;
		Speed = 1;

		SetTimer(hWnd, 0, 100, nullptr);
		SetTimer(hWnd, 1, 300, nullptr);
		break;

	case WM_CHAR:
		if (start) {
			if (wParam != VK_RETURN) {
				len = strlen(SetText);
				SetText[len] = (TCHAR)wParam;
				SetText[len + 1] = 0;
			}
			else {
				wsprintf(temp, SetText);
				SetText[len - len] = 0;				
			}

			if (wParam == VK_BACK && SetText[len - 1] != 0) {
				SetText[len - 1] = 0;
			}
		}
		break;

	case WM_KEYDOWN:
		switch (wParam) {

		case VK_RETURN:
			if (!start) {
				for (int i = 0; i < 100; i++) {
					InitText(i);
				}
				start = true;
			}

			else {
				Enter = true;
			}

			if (GameOver) {
				Best = Level;
				InitGame();
				GameOver = false;
			}

			if (Next) {
				LevelUpEvent();
				Next = false;
			}

			break;

		case VK_SPACE:

			break;
		}
		break;

	case WM_TIMER:
		switch (wParam) {
		case 0:
			if (Life == 0) {
				GameOver = true;
				start = false;
			}

			if (score == 10) {
				Next = true;
				start = false;
			}

			break;

		case 1:
			Wait++;
			if (Wait == 3)
				Wait = 0;

			RandomY = rand() % 10;
			if (RandomY == 0) {
				count++;
			}
			break;
		}
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ----------		
		DrawBitmap(hdc, 0, 0, rt.right, rt.bottom, BackGround, 0, 0, 0);

		wsprintf(lifeWord, "Life -> %d", Life);
		wsprintf(LevelWord, "Level -> %d", Level);
		wsprintf(BestLevel, "Best Level -> %d", Best);

		SetBkMode(hdc, TRANSPARENT);

		SetTextColor(hdc, RGB(255, 0, 0));

		TextOut(hdc, rt.right - 100, rt.top, lifeWord, strlen(lifeWord));
		TextOut(hdc, rt.right - 100, rt.top + 20, LevelWord, strlen(LevelWord));
		TextOut(hdc, rt.right - 100, rt.top + 40, BestLevel, strlen(BestLevel));


		SetTextColor(hdc, RGB(0, 0, 255));
		if (!start && !Next && !GameOver && Wait % 2 == 0) {
			TextOut(hdc, rt.right / 2 - 110, rt.bottom / 2, str[Start], strlen(str[Start]));
		}
		if (Next) {
			TextOut(hdc, rt.right / 2 - 110, rt.bottom / 2, str[LevelUp], strlen(str[LevelUp]));
		}
		if (GameOver) {
			TextOut(hdc, rt.right / 2 - 110, rt.bottom / 2, str[Lose], strlen(str[Lose]));
		}

		if (start && !GameOver) {

			for (int i = 0; i < count; i++) {
				GameData[i].pos.y += Speed;
				TextOut(hdc, GameData[i].pos.x, GameData[i].pos.y, GameData[i].Data, strlen(GameData[i].Data));

				if (GameData[i].pos.y >= 490) {
					InitText(i);
					Life--;
				}

				if (Enter) {
					for (int i = 0; i < count; i++) {
						if (!strcmp(temp, GameData[i].Data)) {
							InitText(i);
							score++;
							break;
						}
					}
					Enter = false;
				}
			}
		}


		hBrush = CreateSolidBrush(RGB(255, 0, 0));
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
		Rectangle(hdc, 0, 495, 800, 500);
		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);

		Rectangle(hdc, 350, 520, 450, 550);
		TextOut(hdc, 352, 522, SetText, strlen(SetText));

		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		DeleteObject(BackGround);
		PostQuitMessage(0);
		return 0;


	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}