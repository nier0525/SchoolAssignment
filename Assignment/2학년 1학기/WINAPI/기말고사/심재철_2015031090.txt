#include <windows.h> // 윈도우 헤더파일

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

#include <math.h>
#define BSIZE 40

HWND hWndMain;
RECT rt;

int x[100];
int count, size;
int index;

bool once;

struct One {
	double stack;
	POINT pos;
}one[100];

struct Bullet {
	bool bone;
	POINT pos;
}bullet[100];

void Init() {
	GetClientRect(hWndMain, &rt);
	
	count = 1;
	size = 1;
	index = 0;

	for (int i = 0; i < 100; i++) {
		one[i].stack = 0;
		one[i].pos.x = 40;
		one[i].pos.y = 500;

		x[i] = 10;
	}

	for (int i = 0; i < 100; i++) {
		bullet[i].bone = false;
		bullet[i].pos.x = rt.right / 2;
		bullet[i].pos.y = rt.bottom - 20;
	}

	once = false;
}

DWORD WINAPI ThreadFunc(LPVOID prc) {
	GetClientRect(hWndMain, &rt);
	for (;;) {
		for (int i = 0; i < count; i++) {
			one[i].stack += 10.0;
			one[i].pos.y = (rt.bottom - (BSIZE / size)) - 300 * sin(one[i].stack * 3.14 / 180.0);
			if (one[i].stack == 180.0) {
				one[i].stack = 0;
			}
			if (one[i].pos.x <= 0 || one[i].pos.x >= rt.right - (BSIZE / size)) {
				x[i] *= -1;
			}
			one[i].pos.x += x[i];
		}
		Sleep(50);
	}
}

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}

BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < BSIZE / size) return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	RECT buf;
	HBITMAP DB, oldDB;

	HBRUSH hBrush, oldBrush;

	DWORD ThreadID;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		hWndMain = hWnd;
		Init();
		CloseHandle(CreateThread(nullptr, 0, ThreadFunc, nullptr, 0 , &ThreadID));
		SetTimer(hWnd, 0, 10, nullptr);
		break;

	case WM_KEYUP: 
		once = false;
		break;

	case WM_TIMER:
		if (GetAsyncKeyState(VK_SPACE) & 0x8000) {
			if (!once) {
				bullet[index++].bone = true;
				once = true;
			}
		}
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &rt);
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ----------

		hBrush = CreateSolidBrush(RGB(255, 255, 0));
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush);

		for (int i = 0; i < count; i++) {
			Ellipse(hdc, one[i].pos.x - BSIZE / size, one[i].pos.y - BSIZE / size, one[i].pos.x + BSIZE / size, one[i].pos.y + BSIZE / size);
		}

		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);

		hBrush = CreateSolidBrush(RGB(255, 0, 0));
		oldBrush = (HBRUSH)SelectObject(hdc, hBrush);

		Rectangle(hdc, rt.right / 2 - 40, rt.bottom - 20, rt.right / 2 + 40, rt.bottom);
		
		for (int i = 0; i < index; i++) {
			if (bullet[i].bone) {
				bullet[i].pos.y -= 5;
				Ellipse(hdc, bullet[i].pos.x - 10, bullet[i].pos.y - 10, bullet[i].pos.x + 10, bullet[i].pos.y + 10);

				for (int j = 0; j < count; j++) {
					if (InCircle(bullet[i].pos.x, bullet[i].pos.y, one[j].pos.x, one[j].pos.y)) {
						bullet[i].bone = false;

						size++;
						count++;

						one[count].pos.x = bullet[i].pos.x;
						one[count].pos.y = bullet[i].pos.y;
					}
				}

				if (bullet[i].pos.y <= 20) {
					bullet[i].bone = false;
				}
			}
		}

		SelectObject(hdc, oldBrush);
		DeleteObject(hBrush);

		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_DESTROY:
		KillTimer(hWnd, 0);
		PostQuitMessage(0);
		return 0;

	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}