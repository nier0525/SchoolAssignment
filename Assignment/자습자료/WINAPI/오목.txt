#include <Windows.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("Game"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 750, 800, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

#define BSIZE 25
#define BSIZE2 25

enum { BLACK = 1, WHITE };

static int x, y, mx, my, ix, iy;
static double dx, dy;
static int Rect[26][26];

bool change = false;
bool finish = false;

//void DrawBitmap(HDC hdc, int x, int y, int brx, int bry, HBITMAP hBitmap, int r, int g, int b) {
//	HDC MemDC;
//	HBITMAP OldBitMap;
//	int bx, by;
//	BITMAP bitmap;
//
//	MemDC = CreateCompatibleDC(hdc);
//	OldBitMap = (HBITMAP)SelectObject(MemDC, hBitmap);
//
//	GetObject(hBitmap, sizeof(BITMAP), &bitmap);
//	bx = bitmap.bmWidth;
//	by = bitmap.bmHeight;
//
//	GdiTransparentBlt(hdc, x, y, brx, bry, MemDC, 0, 0, bx, by, RGB(r, g, b));
//	//BitBlt(hdc, x, y, bx, by, MemDC, 0, 0, SRCCOPY);
//
//	SelectObject(MemDC, OldBitMap);
//	DeleteDC(MemDC);
//}


void DrawMap(HDC hdc, int _size, int x, int y) {
	HBRUSH hBrush, oldBrush;

	hBrush = CreateSolidBrush(RGB(230, 150, 70));
	oldBrush = (HBRUSH)SelectObject(hdc, hBrush);

	Rectangle(hdc, x + (_size * 26), y + (_size * 26), x - _size, y - _size);

	SelectObject(hdc, oldBrush);
	DeleteObject(hBrush);

	hBrush = CreateSolidBrush(RGB(255, 150, 70));
	oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
	for (int i = 0; i < BSIZE2; i++) {
		for (int j = 0; j < BSIZE2; j++) {
			Rectangle(hdc, x + i * _size, y + j * _size, x + (i + 1) * _size, (y + _size) + j * _size);
		}
	}
	SelectObject(hdc, oldBrush);
	DeleteObject(hBrush);
}

void DrawDoll(HDC hdc, int _size, double x, double y) {
	for (int i = 0; i < BSIZE2 + 1; i++) {
		for (int j = 0; j < BSIZE2 + 1; j++) {
			if (Rect[i][j] == BLACK) {
				HBRUSH hBrush, oldBrush;
				hBrush = CreateSolidBrush(RGB(0, 0, 0));
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Ellipse(hdc, x + i * _size, y + j * _size, x + (i + 1) * _size, (y + _size) + j * _size);
				SelectObject(hdc, oldBrush);
				DeleteObject(hBrush);

			}
			if (Rect[i][j] == WHITE) {
				Ellipse(hdc, x + i * _size, y + j * _size, x + (i + 1) * _size, (y + _size)+ j *_size);
			}
		}
	}
}

void DrawMoveDoll(HDC hdc, int _size, int x, int y) {
	if (!finish) {
		if (!change) {
			HBRUSH hBrush, oldBrush;
			hBrush = CreateSolidBrush(RGB(0, 0, 0));
			oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
			Ellipse(hdc, x + _size, y + _size, x - _size, y - _size);
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
		}
		if (change) {
			Ellipse(hdc, x + _size, y + _size, x - _size, y - _size);
		}
	}
}

void DollCheck(int mx, int my) {
	if (mx < BSIZE2 + 1  && my < BSIZE2 + 1) {
		if (Rect[mx][my]) {
			return;
		}
		if (finish) {
			return;
		}

		if (!change) {
			change = true;
		}
		else {
			change = false;
		}

		if (change) {
			Rect[mx][my] = BLACK;
		}
		if (!change) {
			Rect[mx][my] = WHITE;
		}
	}
}

void GameResult(HWND hWnd,int mx, int my) {
	if (!finish) {
		if (Rect[mx][my] == BLACK) {
			for (int i = 2; i < 24; i++) {
				for (int j = 0; j < 26; j++) {
					if (Rect[i - 2][j] == BLACK && Rect[i - 1][j] == BLACK && Rect[i][j] == BLACK && Rect[i + 1][j] == BLACK && Rect[i + 2][j] == BLACK ||
						Rect[i][j - 2] == BLACK && Rect[i][j - 1] == BLACK && Rect[i][j] == BLACK && Rect[i][j + 1] == BLACK && Rect[i][j + 2] == BLACK) {

						MessageBox(hWnd, "흑돌 승리!", "게임 종료", MB_OK);
						finish = true;
					}
				}
			}
			for (int i = 2; i < 24; i++) {
				for (int j = 2; j < 24; j++) {
					if (Rect[i - 2][j - 2] == BLACK && Rect[i - 1][j - 1] == BLACK && Rect[i][j] == BLACK && Rect[i + 1][j + 1] == BLACK && Rect[i + 2][j + 2] == BLACK ||
						Rect[i + 2][j - 2] == BLACK && Rect[i + 1][j - 1] == BLACK && Rect[i][j] == BLACK && Rect[i - 1][j + 1] == BLACK && Rect[i - 2][j + 2] == BLACK) {

						MessageBox(hWnd, "흑돌 승리!", "게임 종료", MB_OK);
						finish = true;
					}
				}
			}
		}

		if (Rect[mx][my] == WHITE) {
			for (int i = 2; i < 24; i++) {
				for (int j = 0; j < 26; j++) {
					if (Rect[i - 2][j] == WHITE && Rect[i - 1][j] == WHITE && Rect[i][j] == WHITE && Rect[i + 1][j] == WHITE && Rect[i + 2][j] == WHITE ||
						Rect[i][j - 2] == WHITE && Rect[i][j - 1] == WHITE && Rect[i][j] == WHITE && Rect[i][j + 1] == WHITE && Rect[i][j + 2] == WHITE) {

						MessageBox(hWnd, "백돌 승리!", "게임 종료", MB_OK);
						finish = true;
					}
				}
			}
			for (int i = 2; i < 24; i++) {
				for (int j = 2; j < 24; j++) {
					if (Rect[i - 2][j - 2] == WHITE && Rect[i - 1][j - 1] == WHITE && Rect[i][j] == WHITE && Rect[i + 1][j + 1] == WHITE && Rect[i + 2][j + 2] == WHITE ||
						Rect[i + 2][j - 2] == WHITE && Rect[i + 1][j - 1] == WHITE && Rect[i][j] == WHITE && Rect[i - 1][j + 1] == WHITE && Rect[i - 2][j + 2] == WHITE) {

						MessageBox(hWnd, "백돌 승리!", "게임 종료", MB_OK);
						finish = true;
					}
				}
			}
		}
	}
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	HDC backDC, DBDC;
	PAINTSTRUCT ps;
	static RECT buf;
	HBITMAP DB, oldDB;
	//----------------------------

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &buf);
		break;

	case WM_CREATE:
		x = 50;	y = 50;
		dx = 37.5; dy = 37.5;
		mx = -50; my = -50;

		for (int i = 0; i < 25; i++) {
			for (int j = 0; j < 25; j++) {
				Rect[i][j] = 0;
			}
		}
		CreateWindow(TEXT("button"), TEXT("ReSet"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 310, 720, 100, 25, hWnd, (HMENU)0, g_hinst, nullptr);
		break;

	case WM_COMMAND:
		switch (wParam) {
		case 0:
			for (int i = 0; i < 25; i++) {
				for (int j = 0; j < 25; j++) {
					Rect[i][j] = 0;
				}
			}
			finish = false;
			change = false;
			break;
		}
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_PAINT:
		GetClientRect(hWnd, &buf);
		hdc = BeginPaint(hWnd, &ps);
		// 더블 버퍼
		DBDC = CreateCompatibleDC(hdc);
		DB = CreateCompatibleBitmap(hdc, buf.right, buf.bottom);
		oldDB = (HBITMAP)SelectObject(DBDC, DB);
		PatBlt(DBDC, 0, 0, buf.right, buf.bottom, WHITENESS);
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		// ------------------------------------------
		DrawMap(hdc, BSIZE, x, y);	// 25x25 맵
		DrawDoll(hdc, BSIZE, dx, dy);	// 검은돌,흰돌
		DrawMoveDoll(hdc, BSIZE/2, ix, iy);
		//--------------------------------------------
		// 더블 버퍼 끝
		backDC = hdc;
		hdc = DBDC;
		DBDC = backDC;
		BitBlt(hdc, 0, 0, buf.right, buf.bottom, DBDC, 0, 0, SRCCOPY);
		SelectObject(DBDC, oldDB);
		DeleteObject(DB);
		DeleteDC(DBDC);
		DeleteDC(backDC);
		// ----------
		EndPaint(hWnd, &ps);
		break;

	case WM_LBUTTONDOWN:
		mx = (LOWORD(lParam) - dx) / BSIZE;
		my = (HIWORD(lParam) - dy) / BSIZE;
		DollCheck(mx, my);
		GameResult(hWnd, mx, my);
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_MOUSEMOVE:
		ix = LOWORD(lParam);
		iy = HIWORD(lParam);
		if (ix > buf.right) ix = buf.right;
		if (ix < buf.left) ix = buf.left;
		if (iy > buf.bottom) iy = buf.bottom;
		if (iy < buf.top) iy = buf.top;
		InvalidateRect(hWnd, nullptr, false);
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;


	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}