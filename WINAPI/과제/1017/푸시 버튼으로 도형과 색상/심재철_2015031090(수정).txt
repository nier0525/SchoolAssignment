#include <windows.h> // 윈도우 헤더파일

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = NULL; // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 600, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	static BOOL start = FALSE;
	static int plan;
	static int x, y,xx,yy;
	static int r, g, b;
	HPEN hPen, oldPen;
	HBRUSH hBrush, oldBrush;

	switch (iMessage) {

	case WM_CREATE:
		CreateWindow(TEXT("button"), TEXT("직선"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 20, 100, 25, hWnd, (HMENU)0, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("원"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 50, 100, 25, hWnd, (HMENU)1, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("네모"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 80, 100, 25, hWnd, (HMENU)2, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("빨강"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 130, 20, 100, 25, hWnd, (HMENU)3, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("파랑"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 130, 50, 100, 25, hWnd, (HMENU)4, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("노랑"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 130, 80, 100, 25, hWnd, (HMENU)5, g_hinst, NULL);
		CreateWindow(TEXT("button"), TEXT("지우기"), WS_CHILD | WS_VISIBLE |
			BS_PUSHBUTTON, 20, 110, 100, 25, hWnd, (HMENU)6, g_hinst, NULL);
		return 0;


	case WM_COMMAND:
		switch (wParam)
		{
		case 0:
			plan = 1;
			break;
		case 1:
			plan = 2;
			break;
		case 2:
			plan = 3;
			break;
		case 3:
			r = 255;
			g = 0;
			b = 0;
			break;
		case 4:
			r = 0;
			g = 0;
			b = 255;
			break;
		case 5:
			r = 255;
			g = 255;
			b = 0;
			break;
		case 6:
			r = 0;
			g = 0;
			b = 0;
			plan = 0;
			InvalidateRect(hWnd, NULL, TRUE);
			break;
		}

	case WM_LBUTTONDOWN:
		if (plan == 1) {
			InvalidateRect(hWnd, NULL, FALSE); // 화면 초기화
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			start = TRUE;
		}
		if (plan == 2) {
			InvalidateRect(hWnd, NULL, FALSE); // 화면 초기화
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			start = TRUE;
		}
		if (plan == 3) {
			InvalidateRect(hWnd, NULL, FALSE); // 화면 초기화
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			start = TRUE;
		}
		return 0;

	case WM_LBUTTONUP:
		if (plan == 1) // 변수 line의 정수가 1일 경우
		{
			hdc = GetDC(hWnd);
			MoveToEx(hdc, x, y, NULL);
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			hPen = CreatePen(PS_SOLID, 3, RGB(r, g, b)); // 선 색
			oldPen = (HPEN)SelectObject(hdc, hPen);	// 기존의 색을 oldPen 에 저장
			hBrush = CreateSolidBrush(RGB(r, g, b)); // 면적 색
			oldBrush = (HBRUSH)SelectObject(hdc, hBrush); // 기존의 색을 oldPen 에 저장
			LineTo(hdc, x, y); // 선이 그려진다.
			SelectObject(hdc, oldPen);	// 이전의 펜으로 돌아감
			DeleteObject(hPen);
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
			start = FALSE;
		}
		if (plan == 2) // 변수 line의 정수가 1일 경우
		{
			hdc = GetDC(hWnd);
			MoveToEx(hdc, x, y, NULL);
			xx = LOWORD(lParam);
			yy = HIWORD(lParam);
			hPen = CreatePen(PS_SOLID, 3, RGB(r, g, b)); // 선 색
			oldPen = (HPEN)SelectObject(hdc, hPen);	// 기존의 색을 oldPen 에 저장
			hBrush = CreateSolidBrush(RGB(r, g, b)); // 면적 색
			oldBrush = (HBRUSH)SelectObject(hdc, hBrush); // 기존의 색을 oldPen 에 저장
			Ellipse(hdc,x,y,xx,yy); // 원형 생성
			SelectObject(hdc, oldPen);	// 이전의 펜으로 돌아감
			DeleteObject(hPen);
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
			start = FALSE;
		}
		if (plan == 3) // 변수 line의 정수가 1일 경우
		{
			hdc = GetDC(hWnd);
			MoveToEx(hdc, x, y, NULL);
			xx = LOWORD(lParam);
			yy = HIWORD(lParam);
			hPen = CreatePen(PS_SOLID, 3, RGB(r, g, b)); // 선 색
			oldPen = (HPEN)SelectObject(hdc, hPen);	// 기존의 색을 oldPen 에 저장
			hBrush = CreateSolidBrush(RGB(r, g, b)); // 면적 색
			oldBrush = (HBRUSH)SelectObject(hdc, hBrush); // 기존의 색을 oldPen 에 저장
			Rectangle(hdc, x, y, xx, yy); // 사각형 생성
			SelectObject(hdc, oldPen);	// 이전의 펜으로 돌아감
			DeleteObject(hPen);
			SelectObject(hdc, oldBrush);
			DeleteObject(hBrush);
			start = FALSE;
		}
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}