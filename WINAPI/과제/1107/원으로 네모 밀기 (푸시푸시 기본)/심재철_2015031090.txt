#include <windows.h> // 윈도우 헤더파일
#include <time.h>
#include "resource.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); // CALLBACK 매크로
HINSTANCE g_hinst;   // 인스턴스 핸들
LPCTSTR lpszClass = TEXT("심재철_2015031090"); // 제목 표시물에 표시되는 내용


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) // main 함수
{
	HWND hWnd; // 윈도우 핸들 선언
	MSG Message; // 메세지 구조체 변수 선언
	WNDCLASS WndClass; // Windows Class 구조체 변수 선언

	g_hinst = hInstance;
	// hInstance 값을 외부에서도 사용할 수 있도록 전역변수에 값을 저장

	WndClass.cbClsExtra = 0; // 예약 영역. 지금은 사용 X
	WndClass.cbWndExtra = 0; // 예약 영역
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); // 윈도우의 배경 색상을 지정
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); // 윈도우의 마우스 포인터 모양을 지정
	WndClass.hIcon = LoadIcon(NULL, IDI_HAND); // 윈도우의 커서 모양 지정
	WndClass.hInstance = hInstance; // 윈도우 클래스를 등록하는 프로그램
	WndClass.lpfnWndProc = WndProc; // 윈도우 메세지 처리 함수 지정
	WndClass.lpszClassName = lpszClass; // 윈도우 클래스의 이름 지정
	WndClass.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1); // 이 프로그램의 메뉴 지정
	WndClass.style = CS_HREDRAW | CS_DBLCLKS | CS_VREDRAW; // 윈도우의 스타일을 정의

	RegisterClass(&WndClass); // WNDCLASS 구조체의 번지를 전달

	// 윈도우를 생성하고 창에 표시하는 기능을 수행
	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW, /*CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT*/
		300, 100, 800, 900, NULL, (HMENU)NULL, hInstance, NULL);

	ShowWindow(hWnd, nCmdShow);

	// 메세지 루프를 실행
	while (GetMessage(&Message, NULL, 0, 0)) {  // Queue 에 있는 메시지를

		if ((Message.message == WM_KEYDOWN || Message.message == WM_KEYUP) && Message.hwnd != hWnd) {
			PostMessage(hWnd, Message.message, Message.wParam, Message.lParam);
		}
		TranslateMessage(&Message); // 키보드를 입력 메시지를 가공하여 프로그램을
									// 사용할 수 있도록
		DispatchMessage(&Message);  // 메세지를 윈도우의 메세지 처리 함수

	}

	return (int)Message.wParam; // 탈출 코드. 프로그램 종료
}
#include <math.h>
#define SIZE 20

double Lengthpts(int x1, int y1, int x2, int y2) {
	return (sqrt((float)((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1)))); // 두 좌표간의 거리 계산
}

BOOL InCircle(int x, int y, int mx, int my) {
	if (Lengthpts(x, y, mx, my) < SIZE) return TRUE;
	else return FALSE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{


	HDC hdc;
	PAINTSTRUCT ps;
	static RECT rt;
	HBRUSH hBrush, oldBrush;

	static BOOL start = FALSE;
	static BOOL rect = FALSE;
	static BOOL rect1 = FALSE;
	static BOOL rect2 = FALSE;
	static int move = 20;
	static int one_x, one_y;
	static int rect_x, rect_y;
	static int rect_x1, rect_y1;
	static int rect_x2, rect_y2;
	static int count = 0;

	switch (iMessage) {

	case WM_SIZE:
		GetClientRect(hWnd, &rt);
		break;

	case WM_CREATE:
		GetClientRect(hWnd, &rt);
		one_x = rt.right/2; one_y = rt.bottom/2;
		rect_x = 300; rect_y = 300;
		rect_x1 = 600; rect_y1 = 100;
		rect_x2 = 100; rect_y2 = 400;
		break;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		if (start) {
			Ellipse(hdc, one_x + SIZE, one_y + SIZE, one_x - SIZE, one_y - SIZE);
			if (rect == FALSE) {
				hBrush = CreateSolidBrush(RGB(255, 0, 0)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, rect_x + SIZE, rect_y + SIZE, rect_x - SIZE, rect_y - SIZE); // 이동할 사각형

				hBrush = CreateSolidBrush(RGB(255, 0, 0)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, 600 + SIZE, 600 + SIZE, 600 - SIZE, 600 - SIZE); // 목표지점

				SelectObject(hdc, oldBrush);
				DeleteObject(hBrush);
			}
			if (rect1 == FALSE) {
				hBrush = CreateSolidBrush(RGB(0, 255, 0)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, rect_x1 + SIZE, rect_y1 + SIZE, rect_x1 - SIZE, rect_y1 - SIZE); // 이동할 사각형

				hBrush = CreateSolidBrush(RGB(0, 255, 0)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, 600 + SIZE, 560 + SIZE, 600 - SIZE, 560 - SIZE); // 목표지점

				SelectObject(hdc, oldBrush);
				DeleteObject(hBrush);
			}
			if (rect2 == FALSE) {
				hBrush = CreateSolidBrush(RGB(0, 255, 255)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, rect_x2 + SIZE, rect_y2 + SIZE, rect_x2 - SIZE, rect_y2 - SIZE); // 이동할 사각형

				hBrush = CreateSolidBrush(RGB(0, 255, 255)); // 면적 색
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				Rectangle(hdc, 600 + SIZE, 520 + SIZE, 600 - SIZE, 520 - SIZE); // 목표지점

				SelectObject(hdc, oldBrush);
				DeleteObject(hBrush);
			}
		}

		if (rect_x == 600 && rect_y == 600) {
			rect = TRUE;
		}
		if (rect_x1 == 600 && rect_y1 == 560) {
			rect1 = TRUE;
		}
		if (rect_x2 == 600 && rect_y2 == 520) {
			rect2 = TRUE;
		}
		if (rect == TRUE && rect1 == TRUE && rect2 == TRUE) {
			MessageBox(hWnd, "게임 클리어", "게임 종료", MB_OK);
			ExitProcess(0);
		}
		break;

	case WM_KEYDOWN:
		switch (wParam) {
		case VK_LEFT:
			if (one_x - SIZE < rt.left) break;
			else one_x -= move;

			if (InCircle(one_x, one_y, rect_x, rect_y)) rect_x -= move;
			if (InCircle(one_x, one_y, rect_x1, rect_y1)) rect_x1 -= move;
			if (InCircle(one_x, one_y, rect_x2, rect_y2)) rect_x2 -= move;

			break;

		case VK_RIGHT:
			if (one_x + SIZE > rt.right) break;
			else one_x += move;
			
			if (InCircle(one_x, one_y, rect_x, rect_y)) rect_x += move;
			if (InCircle(one_x, one_y, rect_x1, rect_y1)) rect_x1 += move;
			if (InCircle(one_x, one_y, rect_x2, rect_y2)) rect_x2 += move;
			break;

		case VK_UP:
			if (one_y - SIZE < rt.top) break;
			else one_y -= move;

			if (InCircle(one_x, one_y, rect_x, rect_y)) rect_y -= move;
			if (InCircle(one_x, one_y, rect_x1, rect_y1)) rect_y1 -= move;
			if (InCircle(one_x, one_y, rect_x2, rect_y2)) rect_y2 -= move;
			break;

		case VK_DOWN:
			if (one_y + SIZE > rt.bottom) break;
			else one_y += move;

			if (InCircle(one_x, one_y, rect_x, rect_y)) rect_y += move;
			if (InCircle(one_x, one_y, rect_x1, rect_y1)) rect_y1 += move;
			if (InCircle(one_x, one_y, rect_x2, rect_y2)) rect_y2 += move;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;

	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case ID_game1:
			start = TRUE;
			break;

		case ID_game2:
			ExitProcess(0);
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;

	}
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}